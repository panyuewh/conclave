#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <obliv.oh>
#include <math.h>

#include "workflow.h"

void debugPrint(intermediateMat *mat) {
    int numRows = mat->rows;
	int numCols = mat->cols;
	printf("[ ");
	for (int i = 0; i < numRows; i++)
	{
	    printf("[");
	    for (int j = 0; j < numCols; j++) {
            int opened;
		    revealOblivInt(&opened, (mat->mat[i][j]), 0);
		    printf("%i ", opened);
	    }
	    int opened;
        revealOblivInt(&opened, (mat->keepRows[i]), 0);
        printf("%i", opened);
	    printf("] ");
	}
	printf("]\n");
}

int checkInputCols
	(
	int colsOne,
	int colsTwo
	)
{
	if (colsOne != colsTwo)
	{
		printf("Unequal number of cols.");
		exit(1);
	}
	else
	{
	    return colsOne;
	}
}

int nextPowerOf2(int n)
{
    int p = 1;
    if (n && !(n & (n - 1)))
        return n;

    while (p < n)
        p <<= 1;

    return p;
}

obliv int** padInput
    (
    obliv int **arr,
    int numCols,
    int numRows,
    int nextVal
    )
{

    obliv int **ret = malloc(sizeof(*ret) * nextVal);

    for (int i = 0; i < numRows; i++)
    {
        ret[i] = malloc(sizeof(obliv int) * numCols);
        for (int j = 0; j < numCols; j++)
        {
            ret[i][j] = arr[i][j];
        }
    }

    for (int i = numRows; i < nextVal; i++)
    {
        ret[i] = malloc(sizeof(obliv int) * numCols);
        for (int j = 0; j < numCols; j++)
        {
            ret[i][j] = 0;
        }
    }

    return ret;
}

bool isPowerOfTwo(int n)
{
   return (ceil(log2(n)) == floor(log2(n)));
}

void matToObliv
	(
	Io *io,
	int party,
	intermediateMat *ret
	)
{
	int numRows = ocBroadcastInt(io->rows, party);
	int numCols = ocBroadcastInt(io->cols, party);

	obliv int **array = malloc(sizeof(*array) * numRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * numCols);
		keepRows[i] = 1;
		for (int j = 0; j < numCols; j++)
		{
			array[i][j] = feedOblivInt(io->mat[i][j], party);
		}
	}

	ret->rows = numRows;
	ret->cols = numCols;
	ret->mat = array;
	ret->keepRows = keepRows;
}

void concat
	(
	intermediateMat *matOne,
	intermediateMat *matTwo,
	intermediateMat *ret
	)
{
	int numCols = checkInputCols(matOne->cols, matTwo->cols);
	int numRows = matOne->rows + matTwo->rows;

	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);
	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < matOne->rows; i++)
	{
		keepRows[i] = matOne->keepRows[i];

		array[i] = malloc(sizeof(obliv int) * numCols);
		for (int j = 0; j < numCols; j++)
		{
			array[i][j] = matOne->mat[i][j];
		}
	}

	int m = 0;
	for (int i = matOne->rows; i < numRows; i++)
	{
		keepRows[i] = matTwo->keepRows[m];

		array[i] = malloc(sizeof(obliv int) * numCols);
		for (int j = 0; j < numCols; j++)
		{
			array[i][j] = matTwo->mat[m][j];
		}
		m++;
	}

	ret->rows = numRows;
	ret->cols = numCols;
	ret->mat = array;
	ret->keepRows = keepRows;
}

void addRow
	(
		obliv int *srcOne,
		obliv int *srcTwo,
		obliv int *dest,
		int colsInOne,
		int colsInTwo,
		int joinColTwo
	)
{
	for (int i = 0; i < colsInOne; i++)
	{
		dest[i] = srcOne[i];
	}

	int m = colsInOne;
	for (int i = 0; i < colsInTwo; i++)
	{
		if (i != joinColTwo)
		{
			dest[m] = srcTwo[i];
			m++;
		}
	}
}

void join
	(
	intermediateMat *matOne,
	intermediateMat *matTwo,
	intermediateMat *ret,
	int joinColOne,
	int joinColTwo
	)
{

	int numColsOne = matOne->cols;
	int numColsTwo = matTwo->cols;

	int numRowsOne = matOne->rows;
	int numRowsTwo = matTwo->rows;

	int numOutCols = numColsOne + numColsTwo - 1;
	int maxOutRows = numRowsOne * numRowsTwo;

	obliv int **array = malloc(sizeof(*array) * maxOutRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * maxOutRows);

	int currentRow = 0;

	for (int i = 0; i < numRowsOne; i++)
	{
		for (int j = 0; j < numRowsTwo; j++)
		{
			array[currentRow] = calloc(numOutCols, sizeof(obliv int));
			addRow(matOne->mat[i], matTwo->mat[j], array[currentRow], numColsOne, numColsTwo, joinColTwo);

			obliv int keepThisRow = matOne->keepRows[i] * matTwo->keepRows[j];
			obliv int eqFlag = (matOne->mat[i][joinColOne] == matTwo->mat[j][joinColTwo]);
			keepRows[currentRow] = keepThisRow * eqFlag;

			currentRow++;
		}
	}

	ret->rows = maxOutRows;
	ret->cols = numOutCols;
	ret->mat = array;
	ret->keepRows = keepRows;
}

void addRowLeaky
	(
	obliv int *srcOne,
	obliv int *srcTwo,
	obliv int *dest,
	int colsInOne,
	int colsInTwo,
	int joinColTwo
	) obliv
{

	obliv int a = 1;
	dest[0] = a;
	for (int i = 1; i < colsInOne + 1; i++)
	{
		dest[i] = srcOne[i - 1];
	}

	int m = colsInOne + 1;
	for (int i = 0; i < colsInTwo; i++)
	{
		if (i != joinColTwo)
		{
			dest[m] = srcTwo[i];
			m++;
		}
	}
}

void joinLeaky
	(
	intermediateMat *matOne,
	intermediateMat *matTwo,
	intermediateMat *ret,
	int joinColOne,
	int joinColTwo
	)
{

	int numColsOne = matOne->cols;
	int numColsTwo = matTwo->cols;

	int numRowsOne = matOne->rows;
	int numRowsTwo = matTwo->rows;

	int numOutCols = numColsOne + numColsTwo;
	int maxOutRows = numRowsOne * numRowsTwo;

	obliv int **array = malloc(sizeof(*array) * maxOutRows);

	int currentRow = 0;
	obliv int matchRows = 0;

	for (int i = 0; i < numRowsOne; i++)
	{
		for (int j = 0; j < numRowsTwo; j++)
		{
			array[currentRow] = calloc(numOutCols, sizeof(obliv int));
			obliv if (matOne->mat[i][joinColOne] == matTwo->mat[j][joinColTwo])
			{
				addRowLeaky(matOne->mat[i], matTwo->mat[j], array[currentRow], numColsOne, numColsTwo, joinColTwo);
				matchRows++;
			}
			currentRow++;
		}
	}

	int outRows;
	revealOblivInt(&outRows, matchRows, 0);

	obliv int **outArray = malloc(sizeof(*outArray) * outRows);

	int currentRow = 0;
	for (int i = 0; i < maxOutRows; i++)
	{
		int matchReveal;
		revealOblivInt(&matchReveal, array[i][0], 0);
		if (matchReveal == 1)
		{
			outArray[currentRow] = malloc(sizeof(obliv int) * (numOutCols - 1));
			for (int j = 0; j < numOutCols - 1; j++)
			{
				outArray[currentRow][j] = array[i][j + 1];
			}
			currentRow++;
		}
		free(array[i]);
	}

	ret->rows = outRows;
	ret->cols = numOutCols - 1;
	ret->mat = outArray;
}

void project
	(
	intermediateMat *mat,
	intermediateMat *ret,
	int *projCols
	)
{
	int numRows = mat->rows;
	int numCols = ret->cols;

	obliv int **array = malloc(sizeof(*array) * numRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];

		array[i] = malloc(sizeof(obliv int) * numCols);
		for (int j = 0; j < numCols; j++)
		{
			int idx = projCols[j];
			array[i][j] = mat->mat[i][idx];
		}
	}

	ret->rows = numRows;
	ret->mat = array;
	ret->keepRows = keepRows;
}

void limitLeaky
    (
    intermediateMat *mat,
    intermediateMat *ret,
    int num
    )
{
    int numInRows = mat->rows;
    int numCols = mat->cols;
    int numRows;

    if (num < numInRows)
    {
        numRows = num;
    }
    else
    {
        numRows = numInRows;
    }

    obliv int **array = malloc(sizeof(*array) * numRows);
    obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

    for (int i = 0; i < numRows; i++)
    {
        keepRows[i] = mat->keepRows[i];

        array[i] = malloc(sizeof(obliv int) * numCols);
        for (int j = 0; j < numCols; j++)
        {
            array[i][j] = mat->mat[i][j];
        }
    }

    ret->rows = numRows;
    ret->mat = array;
    ret->keepRows = keepRows;
}

void limit
    (
    intermediateMat *mat,
    intermediateMat *ret,
    int num
    )
{

    int numInRows = mat->rows;
    int numCols = mat->cols;
    int numRows;

    if (num < numInRows)
    {
        numRows = num;
    }
    else
    {
        numRows = numInRows;
    }

    obliv int limitCounter = 0;

    obliv int **array = malloc(sizeof(*array) * numInRows);
    obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

    for (int i = 0; i < numInRows; i++)
    {
        limitCounter += mat->keepRows[i];
        obliv int limitFlag = (limitCounter <= numRows);
        keepRows[i] = (mat->keepRows[i] * limitFlag);

        array[i] = malloc(sizeof(obliv int) * numCols);
        for (int j = 0; j < numCols; j++)
        {
            array[i][j] = mat->mat[i][j];
        }
    }

    ret->rows = numRows;
    ret->cols = numCols;
    ret->mat = array;
    ret->keepRows = keepRows;
}

void multiply
	(
	intermediateMat *mat,
	intermediateMat *ret,
	int *operands,
	int numOperands,
	int scalar,
	int opColIdx,
	bool newCol
	)
{
	int numRows = mat->rows;
	int numCols = mat->cols;

	if (newCol)
	{
		numCols++;
	}

	obliv int **array = malloc(sizeof(*array) * numRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];
		array[i] = malloc(sizeof(obliv int) * numCols);
		for (int j = 0; j < numCols; j++)
		{
			if (j != opColIdx)
			{
				array[i][j] = mat->mat[i][j];
			}
			else
			{
				obliv int temp = 1;
				temp = temp * scalar;
				for (int k = 0; k < numOperands; k++)
				{
					int colIdx = operands[k];
					temp = temp * mat->mat[i][colIdx];
				}
				array[i][j] = temp;
			}
		}
	}

	ret->cols = numCols;
	ret->rows = numRows;
	ret->mat = array;
	ret->keepRows = keepRows;
}

void divide
	(
	intermediateMat *mat,
	intermediateMat *ret,
	int *operands,
	int numOperands,
	int scalar,
	int opColIdx,
	bool newCol
	)
{
	int numRows = mat->rows;
	int numCols = mat->cols;

	if (newCol)
	{
		numCols++;
	}

	obliv int **array = malloc(sizeof(*array) * numRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];
		array[i] = malloc(sizeof(obliv int) * numCols);
		for (int j = 0; j < numCols; j++)
		{
			if (j != opColIdx)
			{
				array[i][j] = mat->mat[i][j];
			}
			else
			{
				int initCol = operands[0];
				obliv int temp = mat->mat[i][initCol] / scalar;
				for (int k = 1; k < numOperands; k++)
				{
					int colIdx = operands[k];
					temp = temp / mat->mat[i][colIdx];
				}
				array[i][j] = temp;
			}
		}
	}

	ret->cols = numCols;
	ret->rows = numRows;
	ret->mat = array;
	ret->keepRows = keepRows;
}

void compareExchange
	(
		obliv int **array,
		obliv int *keepRows,
		int keyCol,
		int numCols,
		int i,
		int j,
		bool ascending,
		int numRows
	)
{

	if (i >= numRows || j >= numRows) {
		return;
	}

	obliv int x = array[i][keyCol];
	obliv int y = array[j][keyCol];

	obliv int c;
	obliv int d;

	if (ascending)
	{

		c = x < y;
		d = 1 - c;
	}
	else
	{
		c = x > y;
		d = 1 - c;
	}

	obliv int keepRowsI = (c * keepRows[i]) + (d * keepRows[j]);
	obliv int keepRowsJ = (d * keepRows[i]) + (c * keepRows[j]);

	obliv int *temp1 = malloc(sizeof(obliv int) * numCols);
	obliv int *temp2 = malloc(sizeof(obliv int) * numCols);

	for (int k = 0; k < numCols; k++)
	{
		obliv int a = array[i][k];
		obliv int b = array[j][k];

		temp1[k] = (c * a) + (d * b);
		temp2[k] = (d * a) + (c * b);
	}

	array[i] = temp1;
	array[j] = temp2;

	keepRows[i] = keepRowsI;
	keepRows[j] = keepRowsJ;
}

void oddEvenMerge
	(
		obliv int **array,
		obliv int *keepRows,
		int keyCol,
		int numCols,
		int lo,
		int n,
		int r,
		bool ascending,
		int numRows
	)
{
	int m = r * 2;
	if (m < n)
	{
		oddEvenMerge(array, keepRows, keyCol, numCols, lo, n, m, ascending, numRows);
		oddEvenMerge(array, keepRows, keyCol, numCols, lo + r, n, m, ascending, numRows);

		for (int i = lo + r; (i + r) < (lo + n); i += m)
		{
			compareExchange(array, keepRows, keyCol, numCols, i, i + r, ascending, numRows);
		}
	} else {
		compareExchange(array, keepRows, keyCol, numCols, lo, lo + r, ascending, numRows);
	}
}

void oddEvenSort
	(
		obliv int **array,
		obliv int *keepRows,
		int keyCol,
		int numCols,
		int lo,
		int n,
		bool ascending,
		int numRows
	)
{
	if (n > 1)
	{
		int m = n / 2;
		oddEvenSort(array, keepRows, keyCol, numCols, lo, m, ascending, numRows);
		oddEvenSort(array, keepRows, keyCol, numCols, lo + m, m, ascending, numRows);
		oddEvenMerge(array, keepRows, keyCol, numCols, lo, n, 1, ascending, numRows);
	}
}

void sortBy
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol
	)
{
	int numRows = mat->rows;
	int numCols = mat->cols;
	int nextPowerOfTwo = nextPowerOf2(numRows);

	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * numCols);
		for (int j = 0; j < numCols; j++)
		{
			array[i][j] = mat->mat[i][j];
		}
	}

	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];
	}

	oddEvenSort(array, keepRows, keyCol, numCols, 0, nextPowerOfTwo, true, numRows);

	ret->mat = array;
	ret->keepRows = keepRows;
	ret->rows = numRows;
	ret->cols = numCols;
}

void compareExchangeByKeepRows
	(
		obliv int **array,
		obliv int *keepRows,
		int numCols,
		int i,
		int j,
		int numRows
	)
{
	if (i >= numRows || j >= numRows)
	{
		return;
	}

	obliv int x = keepRows[i];
	obliv int y = keepRows[j];

	obliv int c = x > y;
	obliv int d = 1 - c;

	obliv int keepRowsI = (c * keepRows[i]) + (d * keepRows[j]);
	obliv int keepRowsJ = (d * keepRows[i]) + (c * keepRows[j]);

	obliv int *temp1 = malloc(sizeof(obliv int) * numCols);
	obliv int *temp2 = malloc(sizeof(obliv int) * numCols);

	for (int k = 0; k < numCols; k++)
	{
		obliv int a = array[i][k];
		obliv int b = array[j][k];

		temp1[k] = (c * a) + (d * b);
		temp2[k] = (d * a) + (c * b);
	}

	array[i] = temp1;
	array[j] = temp2;

	keepRows[i] = keepRowsI;
	keepRows[j] = keepRowsJ;
}

void oddEvenMergeByKeepRows
	(
		obliv int **array,
		obliv int *keepRows,
		int numCols,
		int lo,
		int n,
		int r,
		int numRows
	)
{
	int m = r * 2;
	if (m < n)
	{
		oddEvenMergeByKeepRows(array, keepRows, numCols, lo, n, m, numRows);
		oddEvenMergeByKeepRows(array, keepRows, numCols, lo + r, n, m, numRows);

		for (int i = lo + r; (i + r) < (lo + n); i += m)
		{
			compareExchangeByKeepRows(array, keepRows, numCols, i, i + r, numRows);
		}
	}
	else
	{
		compareExchangeByKeepRows(array, keepRows, numCols, lo, lo + r, numRows);
	}
}

void oddEvenSortByKeepRows
	(
		obliv int **array,
		obliv int *keepRows,
		int numCols,
		int lo,
		int n,
		int numRows
	)
{
	if (n > 1)
	{
		int m = n / 2;
		oddEvenSortByKeepRows(array, keepRows, numCols, lo, m, numRows);
		oddEvenSortByKeepRows(array, keepRows, numCols, lo + m, m, numRows);
		oddEvenMergeByKeepRows(array, keepRows, numCols, lo, n, 1, numRows);
	}
}

void shiftAgg
	(
		obliv int **arr,
		obliv int *keepRows,
		int numRows
	)
{

	for (int i = 1; i < numRows - 1; i++)
	{
        // compare keys of current row and previous
		obliv int eqFlag = (arr[i - 1][0] == arr[i][0]);

		// aggregate previous into current if keys equal
        arr[i][1] = arr[i][1] + (arr[i - 1][1] * eqFlag);

        // only keep if this is last entry in group (i.e., not equal to next)
        // and it's not a dummy element (i.e., keep flag is not 0)
        keepRows[i - 1] = keepRows[i - 1] * (1 - eqFlag);
	}
}

void _agg
	(
		intermediateMat *ret,
		obliv int **array,
		int numCols,
		int numRows
	)
{
	int nextPowerOfTwo = nextPowerOf2(numRows);

	oddEvenSort(array, ret->keepRows, 0, numCols, 0, nextPowerOfTwo, true, numRows);
	shiftAgg(array, ret->keepRows, numRows);

	// TODO: move shuffle into it's own function.
	oddEvenSort(array, ret->keepRows, 1, numCols, 0, nextPowerOfTwo, false, numRows);

	obliv int **retArray = malloc(sizeof(*retArray) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		retArray[i] = malloc(sizeof(obliv int) * numCols);
		retArray[i][0] = array[i][0];
		retArray[i][1] = array[i][1];
	}

	ret->mat = retArray;
	ret->rows = numRows;
	ret->cols = numCols;

}

void _aggLeaky
	(
		intermediateMat *ret,
		obliv int **array,
		int numCols,
		int numRows
	)
{
	int nextPowerOfTwo = nextPowerOf2(numRows);

	oddEvenSort(array, ret->keepRows, 0, numCols, 0, nextPowerOfTwo, true, numRows);
	shiftAgg(array, ret->keepRows, numRows);

	// TODO: move shuffle into it's own function.
	oddEvenSort(array, ret->keepRows, 1, numCols, 0, nextPowerOfTwo, false, numRows);

	obliv int outRows = 0;

	for (int i = 0; i < numRows; i++)
	{
		outRows = outRows + ret->keepRows[i];
	}

	int numOutRows;
	revealOblivInt(&numOutRows, outRows, 0);

	obliv int **retArray = malloc(sizeof(*retArray) * numOutRows);

	for (int i = 0; i < numOutRows; i++)
	{
		retArray[i] = malloc(sizeof(obliv int) * numCols);
		retArray[i][0] = array[i][0];
		retArray[i][1] = array[i][1];
	}

	ret->mat = retArray;
	ret->rows = numOutRows;
	ret->cols = numCols;
}

void agg
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol,
		int aggCol,
		bool leaky
	)
{
	// TODO: numCols hardcoded as 2, generalize for multiple aggCols
	int numRows = mat->rows;
	int numCols = 2;

	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * numCols);
		array[i][0] = mat->mat[i][keyCol];
		array[i][1] = mat->mat[i][aggCol];
	}

	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];
	}

	ret->keepRows = keepRows;

    if (leaky)
    {
    	_aggLeaky(ret, array, numCols, numRows);
    }
    else
    {
		_agg(ret, array, numCols, numRows);
	}
}

void aggCount
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol,
		bool leaky
	)
{
	// TODO: numCols hardcoded as 2, generalize for multiple aggCols
	int numRows = mat->rows;
	int numCols = 2;

	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * numCols);
		array[i][0] = mat->mat[i][keyCol];
		array[i][1] = 1;
	}

	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];
	}

	ret->keepRows = keepRows;

    if (leaky)
	{
		_aggLeaky(ret, array, numCols, numRows);
	}
	else
	{
		_agg(ret, array, numCols, numRows);
	}
}

void shiftAggMeanCountCol
	(
		obliv int **arr,
		obliv int *keepRows,
		int numRows
	)
{

	for (int i = 0; i < numRows - 1; i++)
	{
		obliv int eqFlag = (arr[i][0] == arr[i + 1][0]);
		obliv int keepFlag = keepRows[i] * keepRows[i + 1];

		// only modify data if both rows are keepRows and the keyCols are equal
		obliv int touchFlag = eqFlag * keepFlag;

		obliv int temp1 = arr[i][1] * (1 - touchFlag);
		obliv int temp2 = arr[i + 1][1] + (arr[i][1] * touchFlag);

		obliv int tempCount1 = arr[i][2] * (1 - touchFlag);
		obliv int tempCount2 = arr[i + 1][2] + (arr[i][2] * touchFlag);

		arr[i][1] = temp1;
		arr[i + 1][1] = temp2;

		arr[i][2] = tempCount1;
		arr[i + 1][2] = tempCount2;

		obliv int tempKeep = keepRows[i];
		keepRows[i] = tempKeep * (1 - touchFlag);
	}
}

void _aggMeanWithCountCol
	(
		intermediateMat *ret,
		obliv int **array,
		int numRows,
		int nextPowTwo
	)
{
	oddEvenSort(array, ret->keepRows, 0, 3, 0, nextPowTwo, true, numRows);
	shiftAggMeanCountCol(array, ret->keepRows, numRows);
}

void aggMeanWithCountCol
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol,
		int aggCol,
		int countCol
	)
{

	int numRows = mat->rows;
	int numCols = 3;

	int nextPowerOfTwo = nextPowerOf2(numRows);

	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * numCols);
		array[i][0] = mat->mat[i][keyCol];
		array[i][1] = mat->mat[i][aggCol];
		array[i][2] = mat->mat[i][countCol];
	}

	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];
	}

	ret->keepRows = keepRows;

	_aggMeanWithCountCol(ret, array, numRows, nextPowerOfTwo);
	oddEvenSortByKeepRows(array, ret->keepRows, numCols, 0, nextPowerOfTwo, numRows);
	obliv int **retArray = malloc(sizeof(obliv int *) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		retArray[i] = malloc(sizeof(obliv int) * numCols);
		retArray[i][0] = array[i][0];
		retArray[i][1] = array[i][1] / array[i][2];
	}

	free(array);

	ret->mat = retArray;
	ret->rows = numRows;
	ret->cols = 2;
}

void aggMean
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol,
		int aggCol
	)
{
	int numRows = mat->rows;
	int numCols = 3;

	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * numCols);
		array[i][0] = mat->mat[i][keyCol];
		array[i][1] = mat->mat[i][aggCol];
		array[i][2] = 1;
	}

	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];
	}

	intermediateMat aggMeanIntermediate;

	aggMeanIntermediate.mat = array;
	aggMeanIntermediate.keepRows = keepRows;
	aggMeanIntermediate.rows = numRows;
	aggMeanIntermediate.cols = numCols;

	intermediateMat aggMeanRet;

	aggMeanWithCountCol(&aggMeanIntermediate, &aggMeanRet, 0, 1, 2);

	ret->mat = aggMeanRet.mat;
	ret->keepRows = aggMeanRet.keepRows;
	ret->rows = aggMeanRet.rows;
	ret->cols = aggMeanRet.cols;

	free(array);
	free(keepRows);
}

void aggMeanLeaky
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol,
		int aggCol
	)
{
	int numRows = mat->rows;
	int numCols = 3;

	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * numCols);
		array[i][0] = mat->mat[i][keyCol];
		array[i][1] = mat->mat[i][aggCol];
		array[i][2] = 1;
	}

	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];
	}

	intermediateMat aggMeanIntermediate;

	aggMeanIntermediate.mat = array;
	aggMeanIntermediate.keepRows = keepRows;
	aggMeanIntermediate.rows = numRows;
	aggMeanIntermediate.cols = numCols;

	intermediateMat aggMeanIntermediateTwo;
	aggMeanWithCountCol(&aggMeanIntermediate, &aggMeanIntermediateTwo, 0, 1, 2);

	free(aggMeanIntermediate.mat);
	free(aggMeanIntermediate.keepRows);

	obliv int outRows = 0;

	for (int i = 0; i < aggMeanIntermediateTwo.rows; i++)
	{
		outRows = outRows + aggMeanIntermediateTwo.keepRows[i];
	}

	int numOutRows;
	revealOblivInt(&numOutRows, outRows, 0);

	obliv int **retArray = malloc(sizeof(*retArray) * numOutRows);
	obliv int *retKeepRows = malloc(sizeof(obliv int) * numOutRows);

	for (int i = 0; i < numOutRows; i++)
	{
		retArray[i] = malloc(sizeof(obliv int) * 2);
		retArray[i][0] = aggMeanIntermediateTwo.mat[i][0];
		retArray[i][1] = aggMeanIntermediateTwo.mat[i][1];

		retKeepRows[i] = aggMeanIntermediateTwo.keepRows[i];
	}

	free(aggMeanIntermediateTwo.mat);
	free(aggMeanIntermediateTwo.keepRows);

	ret->mat = retArray;
	ret->rows = numOutRows;
	ret->cols = 2;
	ret->keepRows = retKeepRows;
}

void stdDev
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol,
		int aggCol
	)
{
	int numRows = mat->rows;
	int numCols = 2;

	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * numCols);
		array[i][0] = mat->mat[i][keyCol];
		array[i][1] = mat->mat[i][aggCol];
	}

	intermediateMat aggMeanOut;
	aggMean(mat, &aggMeanOut, keyCol, aggCol);

	for (int i = 0; i < numRows; i++)
	{
		for (int j = 0; j < aggMeanOut.rows; j++)
		{
			obliv int eqFlag = (array[i][0] == aggMeanOut.mat[j][0]);
			obliv int keepFlag = mat->keepRows[i] * aggMeanOut.keepRows[j];

			obliv int temp = array[i][1] - (aggMeanOut.mat[j][1] * eqFlag * keepFlag);
			array[i][1] = temp;
		}
		obliv int tempVal = array[i][1] * array[i][1];
		array[i][1] = tempVal;
	}

	intermediateMat stdDevOut;

	stdDevOut.mat = array;
	stdDevOut.keepRows = mat->keepRows;
	stdDevOut.rows = numRows;
	stdDevOut.cols = 2;

	aggMean(&stdDevOut, ret, 0, 1);
}

obliv int binarySearchHelper
	(
		obliv int **array,
		obliv int element,
		int numRows,
		int numCols,
		int keyCol,
		int retCol
	)
{
	if (numRows == 1)
	{
		return array[0][retCol];
	}

	int mid = floor(numRows / 2);
	int midNumIdx = mid;
	if ((mid * 2) < numRows)
	{
		midNumIdx++;
	}

	obliv int **retArray = malloc(sizeof(*retArray) * midNumIdx);
	obliv int dataCmp = (element < array[mid][keyCol]);

	for (int i = 0; i < midNumIdx; i++)
	{
		retArray[i] = malloc(sizeof(obliv int) * numCols);
		for (int j = 0; j < numCols; j++)
		{
			retArray[i][j] = (dataCmp * array[i][j]) + ((1 - dataCmp) * array[i + mid][j]);
		}
	}

	return binarySearchHelper(retArray, element, midNumIdx, numCols, keyCol, retCol);
}

void stdDevLeaky
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol,
		int aggCol
	)
{
	int numRows = mat->rows;
	int numCols = 2;

	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * numCols);
		array[i][0] = mat->mat[i][keyCol];
		array[i][1] = mat->mat[i][aggCol];
	}

	intermediateMat aggMeanOut;
	aggMeanLeaky(mat, &aggMeanOut, keyCol, aggCol);
	intermediateMat sortedAggMeanOut;
	sortBy(&aggMeanOut, &sortedAggMeanOut, 0);

	for (int i = 0; i < numRows; i++)
	{
		obliv int subVal = binarySearchHelper(sortedAggMeanOut.mat, array[i][0], sortedAggMeanOut.rows, 2, 0, 1);
		obliv int temp = array[i][1] - subVal;
		array[i][1] = temp * temp;
	}

	intermediateMat stdDevOut;

	stdDevOut.mat = array;
	stdDevOut.keepRows = mat->keepRows;
	stdDevOut.rows = numRows;
	stdDevOut.cols = 2;

	aggMeanLeaky(&stdDevOut, ret, 0, 1);
}

void revealResult
	(
	intermediateMat *mat,
	int party,
	protocolIo *io
	)
{

	int *keepFlags = malloc(sizeof(int) * mat->rows);
	int outRows = 0;

	for (int i = 0; i < mat->rows; i++)
	{
		revealOblivInt(&keepFlags[i], mat->keepRows[i], 0);
		if (keepFlags[i] == 1)
		{
		    outRows++;
		}
	}

	int **array = malloc(sizeof(*array) * outRows);

	int currentRetIdx = 0;
	for (int i = 0; i < mat->rows; i++)
	{
		if (keepFlags[i] == 1)
		{
			array[currentRetIdx] = malloc(sizeof(int) * mat->cols);
			for (int j = 0; j < mat->cols; j++)
			{
				revealOblivInt(&array[currentRetIdx][j], mat->mat[i][j], party);
			}
			currentRetIdx++;
		}
	}

	io->ret = array;
	io->out_rows = outRows;
	io->out_cols = mat->cols;
}

void _distinctCount
	(
		intermediateMat *ret,
		obliv int **array,
		obliv int *keepRows,
		int numRows
	)
{
	obliv int retVal = 1;

    for (int i = 1; i < numRows; i++)
	{
        obliv int curr = array[i][0];
        obliv int prev = array[i - 1][0];
        array[i][0] = keepRows[i] * (curr - prev) + prev;
    }

	for (int i = 1; i < numRows; i++)
	{
        obliv int eqFlag = (array[i - 1][0] == array[i][0]);
        retVal = retVal + (1 - eqFlag);
	}

    obliv int isFirstDummy = 1 - keepRows[0];
	obliv int **retArray = malloc(sizeof(*retArray) * 1);
	retArray[0] = malloc(sizeof(**retArray) * 1);
	retArray[0][0] = retVal - isFirstDummy;

	obliv int *keepRows = malloc(sizeof(obliv int) * 1);
	keepRows[0] = 1;

	ret->mat = retArray;
	ret->keepRows = keepRows;
	ret->rows = 1;
	ret->cols = 1;
}

void distinctCountPreSorted
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol
	)
{
    int numRows = mat->rows;
	obliv int **array = malloc(sizeof(*array) * numRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(**array) * 1);
		// assumes -1 not among inputs
		array[i][0] = mat->keepRows[i] * (mat->mat[i][keyCol] + 1) - 1;
		//array[i][0] = mat->mat[i][keyCol];

		keepRows[i] = mat->keepRows[i];
	}

	_distinctCount(ret, array, keepRows, numRows);
}

void distinctCount
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol
	)
{
	int numRows = mat->rows;
	int nextPowerOfTwo = nextPowerOf2(numRows);

	obliv int **array = malloc(sizeof(*array) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		array[i] = malloc(sizeof(obliv int) * 1);
		array[i][0] = mat->mat[i][keyCol];
	}

	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = mat->keepRows[i];
	}

	oddEvenSort(array, keepRows, 0, 1, 0, nextPowerOfTwo, true, numRows);
	_distinctCount(ret, array, keepRows, numRows);
}

void filterEqByConstant
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol,
		int constant
	)
{
	int numRows = mat->rows;
	int numCols = mat->cols;

	obliv int **array = malloc(sizeof(*array) * numRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		obliv int eqFlag;
		eqFlag = (mat->mat[i][keyCol] == constant);

		array[i] = malloc(sizeof(obliv int) * numCols);

		for (int j = 0; j < numCols; j++)
		{
			array[i][j] = mat->mat[i][j];
		}

		keepRows[i] = mat->keepRows[i] * eqFlag;

	}

	ret->mat = array;
	ret-> keepRows = keepRows;
	ret->cols = numCols;
	ret->rows = numRows;
}

void filterLtByColumn
	(
		intermediateMat *mat,
		intermediateMat *ret,
		int keyCol,
		int compCol
	)
{
	int numRows = mat->rows;
	int numCols = mat->cols;

	obliv int **array = malloc(sizeof(*array) * numRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		obliv int ltFlag;
		ltFlag = (mat->mat[i][keyCol] < mat->mat[i][compCol]);

		array[i] = malloc(sizeof(obliv int) * numCols);

		for (int j = 0; j < numCols; j++)
		{
			array[i][j] = mat->mat[i][j];
		}

		keepRows[i] = mat->keepRows[i] * ltFlag;
	}

	ret->mat = array;
	ret-> keepRows = keepRows;
	ret->cols = numCols;
	ret->rows = numRows;
}

void multiplyMatrices
	(
		intermediateMat *matOne,
		intermediateMat *matTwo,
		intermediateMat *ret
	)
{
	if (matOne->rows != matTwo->rows)
	{
		printf("Unequal number of rows for multiplyMatrices operator.");
		exit(1);
	}
	if (matOne->cols != matTwo->cols)
	{
		printf("Unequal number of columns for multiplyMatrices operator.");
		exit(1);
	}

	int numRows = matOne->rows;
	int numCols = matOne->cols;

	obliv int **array = malloc(sizeof(*array) * numRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = matOne->keepRows[i] * matTwo->keepRows[i];

		array[i] = malloc(sizeof(obliv int) * numCols);
		for (int j = 0; j < numCols; j++)
		{
			array[i][j] = matOne->mat[i][j] * matTwo->mat[i][j];
		}
	}

	ret->rows = numRows;
	ret->cols = numCols;
	ret->mat = array;
	ret->keepRows = keepRows;
}

void concatCols
	(
		intermediateMat *matOne,
		intermediateMat *matTwo,
		intermediateMat *ret
	)
{
	if (matOne->rows != matTwo->rows)
	{
		printf("Unequal number of rows for concatCols operator.");
		exit(1);
	}

	int numRows = matOne->rows;

	int numColsOne = matOne->cols;
	int numColsTwo = matTwo->cols;
	int totalCols = numColsOne + numColsTwo;

	obliv int **array = malloc(sizeof(*array) * numRows);
	obliv int *keepRows = malloc(sizeof(obliv int) * numRows);

	for (int i = 0; i < numRows; i++)
	{
		keepRows[i] = matOne->keepRows[i] * matTwo->keepRows[i];

		array[i] = malloc(sizeof(obliv int) * totalCols);
		for (int j = 0; j < totalCols; j++)
		{
			if (j < numColsOne)
			{
				array[i][j] = matOne->mat[i][j];
			}
			else
			{
				array[i][j] = matTwo->mat[i][j - numColsOne];
			}
		}
	}

	ret->rows = numRows;
	ret->cols = totalCols;
	ret->mat = array;
	ret->keepRows = keepRows;
}

void protocol(void *args)
{

    protocolIo *io = (protocolIo*) args;
{{{OP_CODE}}}

}