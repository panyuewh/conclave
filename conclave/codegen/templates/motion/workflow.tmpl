// MIT License
//
// Copyright (c) 2019 Oleksandr Tkachenko
// Cryptography and Privacy Engineering Group (ENCRYPTO)
// TU Darmstadt, Germany
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <limits>
#include "workflow.h"

#include "motioncore/secure_type/secure_unsigned_integer.h"
#include "motioncore/statistics/analysis.h"
#include "motioncore/statistics/run_time_statistics.h"
#include "motioncore/utility/bit_vector.h"
#include "motioncore/algorithm/algorithm_description.h"
#include "motioncore/protocols/arithmetic_gmw/arithmetic_gmw_wire.h"
#include "motioncore/protocols/bmr/bmr_wire.h"
#include "motioncore/protocols/boolean_gmw/boolean_gmw_wire.h"
#include "motioncore/protocols/share_wrapper.h"
#include "motioncore/utility/config.h"

namespace mo = encrypto::motion;

static std::vector<mo::ShareWrapper> DEFAULT_KEEP_ROWS;

std::size_t next_pow_of_two(std::size_t n)
{
    std::size_t p = 1;
    if (n && !(n & (n - 1)))
        return n;

    while (p < n)
        p <<= 1;

    return p;
}

void close_input(mo::PartyPointer& party,
                 const std::vector<std::vector<uint32_t>>& input_rel,
                 std::vector<mo::ShareWrapper>& shared_input,
                 std::set<std::size_t> stored_with)
{
  for (auto pid: stored_with)
    for (std::size_t i=0; i < input_rel.size(); i++)
      shared_input.push_back(party->In<mo::MpcProtocol::kArithmeticGmw>(input_rel[i], pid));
}

void open_output(mo::PartyPointer& party,
                 std::vector<mo::ShareWrapper>& shared_output,
                 std::vector<std::vector<mo::ShareWrapper>>& output,                 
                 std::set<std::size_t> stored_with,
                 std::vector<mo::ShareWrapper>& keep_rows=DEFAULT_KEEP_ROWS,
                 std::vector<mo::ShareWrapper>& output_rows=DEFAULT_KEEP_ROWS)
{
  for (std::size_t i=0; i < shared_output.size(); i++) {
    std::vector<mo::ShareWrapper> unsimdified {shared_output[i].Unsimdify()};
    std::vector<mo::ShareWrapper> output_col;
    for (std::size_t j=0; j < unsimdified.size(); j++) 
      output_col.push_back(unsimdified[j].Out());
    output.push_back(output_col);
  }  
  for (std::size_t i=0; i < keep_rows.size(); i++)
    output_rows.push_back(keep_rows[i].Out()); 
}

void concat(std::vector<mo::ShareWrapper>& left_shared_input,
            std::vector<mo::ShareWrapper>& right_shared_input,
            std::vector<mo::ShareWrapper>& shared_output)
{
  //assert(left_shared_input.size() == right_shared_input.isze());

  for (std::size_t i=0; i < left_shared_input.size(); i++) {
    //std::vector<mo::ShareWrapper> output_cols {left_shared_input[i], right_shared_input[i]};
    //mo::ShareWrapper output_val {mo::ShareWrapper::Concatenate(output_cols)};
    //shared_output.push_back(mo::ShareWrapper::Simdify(output_cols));
    std::vector<mo::ShareWrapper> left_unsimdified {left_shared_input[i].Unsimdify()};
    std::vector<mo::ShareWrapper> right_unsimdified {right_shared_input[i].Unsimdify()};
    std::vector<mo::ShareWrapper> output_cols;
    output_cols.insert(output_cols.end(), left_unsimdified.begin(), left_unsimdified.end());
    output_cols.insert(output_cols.end(), right_unsimdified.begin(), right_unsimdified.end());
    shared_output.push_back(mo::ShareWrapper::Simdify(output_cols));
  }
}

void concatcol(std::vector<mo::ShareWrapper>& left_shared_input,
               std::vector<mo::ShareWrapper>& right_shared_input,
               std::vector<mo::ShareWrapper>& shared_output)
{
  for (std::size_t i=0; i < left_shared_input.size(); i++)
    shared_output.push_back(left_shared_input[i]);
  for (std::size_t i=0; i < right_shared_input.size(); i++)
    shared_output.push_back(right_shared_input[i]);
}


class OddEvenMergeSorter
{
private:
  std::vector<std::vector<mo::ShareWrapper>>* rel;
  std::vector<mo::SecureUnsignedInteger> comp; 
  std::vector<mo::ShareWrapper>* keep_rows;
  std::size_t npo2;
  std::size_t len;

public:
  OddEvenMergeSorter(std::vector<std::vector<mo::ShareWrapper>>& r,
                     std::vector<mo::SecureUnsignedInteger>& c,
                     std::vector<mo::ShareWrapper>& kr=DEFAULT_KEEP_ROWS)
  {
    npo2 = c.size();
    len = r[0].size();
    rel = &r;
    comp = c;
    keep_rows = &kr;
  } 

  OddEvenMergeSorter(std::vector<std::vector<mo::ShareWrapper>>&& r,
                     std::vector<mo::SecureUnsignedInteger>&& c,
                     std::vector<mo::ShareWrapper>& kr=DEFAULT_KEEP_ROWS)
  {
    npo2 = c.size();
    len = r[0].size();
    rel = &r;
    comp = c;
    keep_rows = &kr;
  } 

  void sort()
  {
    oddEvenMergeSort(0, npo2); 
  }

  /** sorts a piece of length n of the array
  * starting at position lo
  */
  void oddEvenMergeSort(std::size_t lo, std::size_t hi)
  {
    if (hi - lo > 1) {
      std::size_t mid = lo + ((hi - lo) / 2) ;
      oddEvenMergeSort(lo, mid);
      oddEvenMergeSort(mid, hi);
      oddEvenMerge(lo, hi, 1);
    }
  }

  /** lo is the starting position and
  * n is the length of the piece to be merged,
  * r is the distance of the elements to be compared
  */
  void oddEvenMerge(std::size_t lo, std::size_t hi, std::size_t r)
  {
    std::size_t step = r * 2 ;
    if (step < hi - lo) {
      oddEvenMerge(lo, hi, step); // even subsequence
      oddEvenMerge(lo+r, hi, step); // odd subsequence
      for (std::size_t i = lo + r; (i<hi-r)&&(i+r<len); i += step) 
        compareSwap(i, i + r);
    }
    else if (lo+r<len) 
      compareSwap(lo, lo + r);
  }

  void compareSwap(std::size_t i, std::size_t j)
  {
    mo::ShareWrapper should_swap = comp[i] > comp[j];
    mo::SecureUnsignedInteger temp_l = should_swap.Mux(comp[i].Get(), comp[j].Get());
    mo::SecureUnsignedInteger temp_r = should_swap.Mux(comp[j].Get(), comp[i].Get());
    comp[i] = temp_l;
    comp[j] = temp_r;
    for (auto& col: *rel) {
      mo::ShareWrapper col_l = should_swap.Mux(col[i], col[j]);
      mo::ShareWrapper col_r = should_swap.Mux(col[j], col[i]);
      col[i] = col_l;
      col[j] = col_r;
    }
    if (keep_rows != &DEFAULT_KEEP_ROWS) {
      mo::ShareWrapper kr_l = should_swap.Mux((*keep_rows)[i], (*keep_rows)[j]);
      mo::ShareWrapper kr_r = should_swap.Mux((*keep_rows)[j], (*keep_rows)[i]);
      (*keep_rows)[i] = kr_l;
      (*keep_rows)[j] = kr_r;    
    }
  }
}; // end class OddEvenMergeSorter


mo::SecureUnsignedInteger SUINT_MAX;

void sortby(std::vector<mo::ShareWrapper>& shared_input,
            std::vector<mo::ShareWrapper>& shared_output,
            std::size_t key_col,
            std::vector<mo::ShareWrapper>& keep_rows=DEFAULT_KEEP_ROWS)
{
  std::vector<std::vector<mo::ShareWrapper>> unsimdified_rel;
  for (std::size_t i=0; i < shared_input.size(); i++) {
    std::vector<mo::ShareWrapper> unsimdified_col = shared_input[i].Unsimdify();
    for (std::size_t j=0; j < unsimdified_col.size(); j++)
      unsimdified_col[j] = unsimdified_col[j].Convert<mo::MpcProtocol::kBooleanGmw>();
    unsimdified_rel.push_back(unsimdified_col);
  }
  std::vector<mo::SecureUnsignedInteger> comp; 
  for (auto& v: unsimdified_rel[key_col]) {
    mo::SecureUnsignedInteger suint_v = v;
    comp.push_back(suint_v);
  } 
  auto len = unsimdified_rel[key_col].size();
  auto npo2 = next_pow_of_two(len);
  for (std::size_t i=len; i<npo2; i++) {
    mo::SecureUnsignedInteger suint_max(SUINT_MAX);
    comp.push_back(suint_max);
  }
  
  OddEvenMergeSorter s(unsimdified_rel, comp, keep_rows);
  s.sort();
  for (std::size_t i=0; i < unsimdified_rel.size(); i++) {
    std::vector<mo::ShareWrapper> unsimdified_col = unsimdified_rel[i];
    for (std::size_t j=0; j < unsimdified_col.size(); j++)
      unsimdified_col[j] = unsimdified_col[j].Convert<mo::MpcProtocol::kArithmeticGmw>();
    shared_output.push_back(mo::ShareWrapper::Simdify(unsimdified_col));
  }
}

mo::SecureUnsignedInteger SUINT_ZERO;
mo::SecureUnsignedInteger SUINT_ONE;
enum enum_agg_func {kSUM, kCOUNT, kMEAN, kSTDDEV};

// assuming rel[0] as key column, rel[1] as agg column, rel[2] as count column on demand
// element of rel is alreadyin kBooleanGmw
void shift_agg(std::vector<std::vector<mo::ShareWrapper>>& rel,
               enum_agg_func k_agg_func,
               mo::SecureUnsignedInteger& base_sum,
               mo::SecureUnsignedInteger& base_count,
               std::vector<mo::ShareWrapper>& keep_rows=DEFAULT_KEEP_ROWS)
{
  std::size_t len = rel[0].size();
  std::vector<mo::ShareWrapper> count_col(len, SUINT_ONE.Get());
  switch (k_agg_func)  // prepare columns
  {
    case kMEAN:
    case kSTDDEV:
      rel.push_back(count_col);
      break;
    case kSUM:
      break; 
    case kCOUNT:
      std::vector<mo::ShareWrapper> count_agg(len, SUINT_ONE.Get());
      rel[1] = count_agg;
      break;
  } 
  auto KEEP_TRUE = (rel[0][len-1] == rel[0][len-1]);
  keep_rows[len-1] = KEEP_TRUE;
  for (std::size_t i=1; i<len; i++) {
    mo::ShareWrapper eq_flag = (rel[0][i-1] == rel[0][i]);
    keep_rows[i-1] = eq_flag ^ KEEP_TRUE;  // eq_flag XOR True
    mo::ShareWrapper accumulated;
    mo::ShareWrapper counted;
    switch (k_agg_func)
    {
      case kSUM:
      case kMEAN:
      case kCOUNT:
        accumulated = eq_flag.Mux(rel[1][i-1], base_sum.Get()).Convert<mo::MpcProtocol::kArithmeticGmw>();
        rel[1][i] = rel[1][i].Convert<mo::MpcProtocol::kArithmeticGmw>();
        rel[1][i] += accumulated;
        rel[1][i] = rel[1][i].Convert<mo::MpcProtocol::kBooleanGmw>();
        break;
      case kSTDDEV:
        //TODO: implement STDDEV
        break;
    }
    switch (k_agg_func)
    {
      case kMEAN:
      case kSTDDEV:
        counted = eq_flag.Mux(rel[2][i-1], base_count.Get());
        rel[2][i] = rel[2][i].Convert<mo::MpcProtocol::kArithmeticGmw>();
        rel[2][i] += counted.Convert<mo::MpcProtocol::kArithmeticGmw>();
        rel[2][i] = rel[2][i].Convert<mo::MpcProtocol::kBooleanGmw>();
        break;
      case kSUM:
      case kCOUNT:
        //No need to calculate a separate count
        break;
    }
  }
  for (std::size_t i=0; i<len; i++) {
    switch (k_agg_func)
    {
      case kMEAN:
        for (std::size_t i=0; i < len; i++) {
            mo::SecureUnsignedInteger dividend(rel[1][i].Convert<mo::MpcProtocol::kArithmeticGmw>());
            mo::SecureUnsignedInteger divisor(rel[2][i].Convert<mo::MpcProtocol::kArithmeticGmw>());
            auto quotient = dividend / divisor;
            rel[1][i] = quotient.Get().Convert<mo::MpcProtocol::kBooleanGmw>();            
        }
        break;
      case kSTDDEV:
        //TODO: implement STDDEV
        break;
      case kSUM:
      case kCOUNT:
        //No need to average
        break;
    }
  }
}

void aggregate(std::vector<mo::ShareWrapper>& shared_input,
               std::vector<mo::ShareWrapper>& shared_output,
               enum_agg_func k_agg_func,
               std::size_t key_col,
               std::size_t agg_col,
               std::vector<mo::ShareWrapper>& keep_rows=DEFAULT_KEEP_ROWS)
{
  std::vector<std::vector<mo::ShareWrapper>> unsimdified_rel;
  for (auto col: {key_col, agg_col}) {
    std::vector<mo::ShareWrapper> unsimdified_col = shared_input[col].Unsimdify();
    for (std::size_t j=0; j < unsimdified_col.size(); j++)
      unsimdified_col[j] = unsimdified_col[j].Convert<mo::MpcProtocol::kBooleanGmw>();
    unsimdified_rel.push_back(unsimdified_col);
  }
  std::vector<mo::SecureUnsignedInteger> comp; 
  for (auto& v: unsimdified_rel[0]) {
    mo::SecureUnsignedInteger suint_v = v;
    comp.push_back(suint_v);
  } 
  auto len = unsimdified_rel[0].size();
  auto npo2 = next_pow_of_two(len);
  for (std::size_t i=len; i<npo2; i++) {
    mo::SecureUnsignedInteger suint_max(SUINT_MAX);
    comp.push_back(suint_max);
  }
  
  OddEvenMergeSorter s(unsimdified_rel, comp);
  s.sort();

  keep_rows.resize(unsimdified_rel[0].size());
  shift_agg(unsimdified_rel, k_agg_func, SUINT_ZERO, SUINT_ZERO, keep_rows);

  for (std::size_t i=0; i < unsimdified_rel.size(); i++) {
    std::vector<mo::ShareWrapper> unsimdified_col = unsimdified_rel[i];
    for (std::size_t j=0; j < unsimdified_col.size(); j++)
      unsimdified_col[j] = unsimdified_col[j].Convert<mo::MpcProtocol::kArithmeticGmw>();
    shared_output.push_back(mo::ShareWrapper::Simdify(unsimdified_col));
  }
}

void CreateWorkflowCircuit(
                mo::PartyPointer& party,
                std::set<std::size_t> stored_with,
                const std::vector<std::vector<std::uint32_t>>& input_rel,
                std::vector<std::vector<mo::ShareWrapper>>& output,
                std::vector<mo::ShareWrapper>& output_rows=DEFAULT_KEEP_ROWS)                                
{
  SUINT_MAX = party->SharedIn<mo::MpcProtocol::kArithmeticGmw, std::uint32_t>(std::numeric_limits<std::uint32_t>::max());
  SUINT_MAX = SUINT_MAX.Get().Convert<mo::MpcProtocol::kBooleanGmw>();
  SUINT_ZERO = party->SharedIn<mo::MpcProtocol::kArithmeticGmw, std::uint32_t>(0);
  SUINT_ZERO = SUINT_ZERO.Get().Convert<mo::MpcProtocol::kBooleanGmw>();
  SUINT_ONE = party->SharedIn<mo::MpcProtocol::kArithmeticGmw, std::uint32_t>(1);
  SUINT_ONE = SUINT_ONE.Get().Convert<mo::MpcProtocol::kBooleanGmw>();
  std::vector<mo::ShareWrapper> keep_rows;
  {{{WORKFLOW}}}
}

mo::RunTimeStatistics EvaluateProtocol(mo::PartyPointer& party,
                                       const std::vector<std::vector<uint32_t>>& input_rel,
                                       std::vector<std::vector<uint32_t>>& output_rel)
{
  std::set<std::size_t> stored_with {0, 1};
  std::vector<std::vector<mo::ShareWrapper>> output;  
  std::vector<mo::ShareWrapper> output_rows;
  CreateWorkflowCircuit(party, stored_with, input_rel, output, output_rows);

  party->Run();
  std::vector<bool> keep(output_rows.size());
  for (std::size_t i=0; i<output_rows.size(); i++) 
    keep[i] = output_rows[i].As<bool>();
  for (auto& col: output) {
    std::vector<std::uint32_t> output_col;
    for (std::size_t i=0; i<keep.size(); i++) 
      if (keep[i])
        output_col.push_back(col[i].As<std::uint32_t>()); 
    output_rel.push_back(output_col);   
  }  

  party->Finish();

  for (std::size_t i=0; i < output_rel[0].size(); i++) {
    for (std::size_t j=0; j < output_rel.size(); j++)
      std::cout << output_rel[j][i] << " ";
    std::cout << std:: endl;
  };  
  
  const auto& statistics = party->GetBackend()->GetRunTimeStatistics();
  return statistics.front();
}
