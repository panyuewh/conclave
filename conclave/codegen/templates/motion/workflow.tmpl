// MIT License
//
// Copyright (c) 2019 Oleksandr Tkachenko
// Cryptography and Privacy Engineering Group (ENCRYPTO)
// TU Darmstadt, Germany
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include "workflow.h"

#include "motioncore/secure_type/secure_unsigned_integer.h"
#include "motioncore/statistics/analysis.h"
#include "motioncore/statistics/run_time_statistics.h"
#include "motioncore/utility/bit_vector.h"
#include "motioncore/algorithm/algorithm_description.h"
#include "motioncore/protocols/arithmetic_gmw/arithmetic_gmw_wire.h"
#include "motioncore/protocols/bmr/bmr_wire.h"
#include "motioncore/protocols/boolean_gmw/boolean_gmw_wire.h"
#include "motioncore/protocols/share_wrapper.h"
#include "motioncore/utility/config.h"

namespace mo = encrypto::motion;

void close_input(mo::PartyPointer& party,
                 const std::vector<std::vector<uint32_t>>& input_rel,
                 std::vector<mo::SecureUnsignedInteger>& shared_input,
                 std::set<std::size_t> stored_with)
{
  for (auto pid: stored_with)
    for (std::size_t i=0; i < input_rel.size(); i++)
      shared_input.push_back(party->In<mo::MpcProtocol::kArithmeticGmw>(input_rel[i], pid));
}

void open_output(mo::PartyPointer& party,
                 std::vector<mo::SecureUnsignedInteger>& shared_output,
                 std::vector<std::vector<mo::SecureUnsignedInteger>>& output,                 
                 std::set<std::size_t> stored_with)
{
  for (std::size_t i=0; i < shared_output.size(); i++) {
    std::vector<mo::SecureUnsignedInteger> output_row {shared_output[i].Unsimdify()};
    for (std::size_t j=0; j < output_row.size(); j++) 
      output_row[j] = output_row[j].Out();
    output.push_back(output_row);
  }  
}

void CreateWorkflowCircuit(
                mo::PartyPointer& party,
                std::set<std::size_t> stored_with,
                const std::vector<std::vector<std::uint32_t>>& input_rel,
                std::vector<std::vector<mo::SecureUnsignedInteger>>& output)                
{
  std::vector<mo::SecureUnsignedInteger> shared_input1; 
  std::vector<mo::SecureUnsignedInteger> shared_input2; 
  std::vector<mo::SecureUnsignedInteger> shared_output;
  close_input(party, input_rel, shared_input1, {0});  
  close_input(party, input_rel, shared_input2, {1});
  std::cout << "pretend executing ... " << std::endl;
  shared_output = shared_input1;
  open_output(party, shared_output, output, {1});
}

mo::RunTimeStatistics EvaluateProtocol(mo::PartyPointer& party,
                                       const std::vector<std::vector<uint32_t>>& input_rel,
                                       std::vector<std::vector<uint32_t>>& output_rel)
{
  std::set<std::size_t> stored_with {0, 1};
  std::vector<std::vector<mo::SecureUnsignedInteger>> output;  
  CreateWorkflowCircuit(party, stored_with, input_rel, output);

  party->Run();
  for (auto each_row: output) {
    std::vector<std::uint32_t> row;
    for (auto each_value: each_row) 
      row.push_back(each_value.As<std::uint32_t>()); 
    output_rel.push_back(row);   
  }  
  party->Finish();
  for (auto row: output_rel) {
    for (auto cell: row)
      std::cout << cell << " ";
    std::cout << std:: endl;
  };
  const auto& statistics = party->GetBackend()->GetRunTimeStatistics();
  return statistics.front();
}
